// this manages entities on a turn by turn basis.
EntityManager
{
	Container entity
	
	Add( Entity e )
	{
		add Entity to container
	}
	\\\\\\\\
	Remove( Entity e )
	{
		remove Entity from container
        call entity function for onDestroy.
	}
	
	TakeTurn()
	{
		foreach entity
			take turn
				
	}


}

// Entity, Entities are basic things that turns are processed for. They have no real behaviour beyond that.
// most Entities should probably have Actions associated with them that get used in the projectile management process.
Entity()
{	

    Entity(Controller)
    {
        onCreate();
        controller = controller.setEntity(this)
    
    }
	turn()
	{
		 Foreach( Controller::getEvents() )
         {
            run event
         }
         Controller::ClearEvents
         
	}
    
    // This is a bit codey for pseudo-code, but it's done very particular
    // this function returns the entity collided with on failure and NULL on success.
    Entity move(float x, float y, bool force = false )
    {
        if( entity is 1 cell in size )
        {
			Store all cells in the entities range in an set without duplicates
            if( !force )	// This argument is passed to check if bounds checking is required
            {
                Check if any entities are overlapping.
				if( entities overlap )
					return other entity
            }
           
           assign collection of cells to this as it's cells
            
            // remove from current.
            Remove Entity From Previous Location
            
			Assign Location and bounding location
        }
    }
    
    checkCollision( Entity e )
    {
            
        if( entity's bounds overlap )
        {
        
            return true;
        }
    
    }
    

    
    getCells()
    {
        returns cellSet
    }
    
    onCreate()
    {
        // logical implementation
    }
    
    onDestroy()
    {
        // logical implementation
    }
    
    onUpdate()
    {
        // logical implementation
    }
}

// This can be extended into a PC or an NPC controller NPC controllers will be AIs etc.
Controller
{
    eventQueue;
    
    getEvents()
    {
        return eventQueue;
    }
}

PlayerController extends Controller
{
    getEvents()
    {
        return eventQueue;
    }
    onMouseButtonDown()
    {
    
    }
    
    onKeyPressed()
    {
    
    }
    
    ... etc general inputs ...
}